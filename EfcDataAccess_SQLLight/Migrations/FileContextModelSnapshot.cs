// <auto-generated />
using EfcDataAccess_SQLLight;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfcDataAccessSQLLight.Migrations
{
    [DbContext(typeof(FileContext))]
    partial class FileContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubPageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("PostId1");

                    b.HasIndex("SubPageId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Domain.Models.SubPage", b =>
                {
                    b.Property<string>("SubPageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubPageId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("SubPages");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.HasOne("Domain.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId");

                    b.HasOne("Domain.Models.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId1");

                    b.HasOne("Domain.Models.SubPage", null)
                        .WithMany("Posts")
                        .HasForeignKey("SubPageId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Domain.Models.SubPage", b =>
                {
                    b.HasOne("Domain.Models.User", "Owner")
                        .WithMany("SubscribedSubs")
                        .HasForeignKey("OwnerUserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Domain.Models.SubPage", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("SubscribedSubs");
                });
#pragma warning restore 612, 618
        }
    }
}
